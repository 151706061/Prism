trigger:
  batch: true
  branches:
    include:
    - master
    - devOps
  paths:
    include:
    - Sandbox/*
    - Source/*

pr:
  branches:
    include:
    - master
  paths:
    include:
    - Sandbox/*
    - Source/*

name: $(Build.BuildId)

variables:
- name: VMImage
  value: windows-latest
- name: MacImage
  value: macOS-latest
- name: BuildConfiguration
  value: Release
- name: BuildPlatform
  value: Any CPU
- group: SignClient
- group: AppleCert

stages:
- stage: buildTest
  displayName: Build & Test
  jobs:
  - template: jobs/prism-core.yml

  - template: jobs/prism-forms.yml

  - template: jobs/prism-wpf.yml

- stage: sandbox
  displayName: Sandbox
  jobs:
  - template: jobs/sandbox-wpf.yml

  - template: jobs/sandbox-android.yml

  - template: jobs/sandbox-ios.yml

- stage: buildPackage
  displayName: Build Prism Library
  jobs:
  - template: jobs/prism-lib.yml

- stage: deploy
  displayName: Deploy Artifacts
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: SandboxAndroidDeploy
    displayName: 'Sandbox Android - App Center'
    environment: 'App Center'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AppCenterDistribute@3
              displayName: 'Deploy Sandbox Android App to App Center'
              inputs:
                serverEndpoint: Prism-AppCenter
                appSlug: 'Prism/Sandbox.Android'
                appFile: '$(Pipeline.Workspace)/Sandbox-Android/HelloWorld.Android.apk'
                releaseNotesInput: 'Automated Release for build $(Build.BuildId)'
                isSilent: false

  - deployment: SandboxiOSDeploy
    displayName: 'Sandbox iOS - App Center'
    environment: 'App Center'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AppCenterDistribute@3
              displayName: 'Deploy Sandbox iOS App to App Center'
              inputs:
                serverEndpoint: Prism-AppCenter
                appSlug: 'Prism/Sandbox.iOS'
                appFile: '$(Pipeline.Workspace)/Sandbox-iOS/HelloWorld.iOS.ipa'
                symbolsDsymFiles: '$(Pipeline.Workspace)/Sandbox-iOS/HelloWorld.iOS.app.dSYM'
                symbolsIncludeParentDirectory: false
                releaseNotesInput: 'Automated Release for build $(Build.BuildId)'
                isSilent: false

  - deployment: GitHub
    displayName: GitHub Packages
    environment: GitHub
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'GitHub-Packages'

  - deployment: MyGet
    displayName: MyGet.org
    environment: MyGet
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'Prism-MyGet'

  - deployment: NuGet
    displayName: NuGet.org
    environment: NuGet
    condition: and(succeeded(),or(eq(variables['IS_PREVIEW'], true), eq(variables['IS_RELEASE'], true)))
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            displayName: Get Build Resources

          - powershell: Source/build/Process-Artifacts.ps1
            displayName: Process Artifacts for Release

          - task: ArchiveFiles@2
            displayName: 'Archive Assembly Artifacts'
            inputs:
              rootFolderOrFile: '$(DLLArtifactsPath)'
              archiveFile: '$(DLLArtifactsZip)'

          - task: GithubRelease@0
            displayName: 'Create GitHub Release'
            inputs:
              gitHubConnection: 'Prism GitHub Connection'
              title: '$(ReleaseDisplayName)'
              tagSource: manual
              tag: 'v$(VersionName)'
              isPreRelease: $(IS_PREVIEW)
              assets: |
               $(DLLArtifactsZip)
               $(Pipeline.Workspace)/**/*.nupkg
              isDraft: true
              addChangeLog: true

          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'NuGet.org'
