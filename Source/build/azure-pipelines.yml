trigger:
  batch: true
  branches:
    include:
    - master
    - devOps
  paths:
    include:
    - Sandbox/*
    - Source/*

pr:
  branches:
    include:
    - master
  paths:
    include:
    - Sandbox/*
    - Source/*

name: $(Build.BuildId)

variables:
- name: VMImage
  value: windows-2019
- name: MacImage
  value: macOS-10.14
- name: BuildConfiguration
  value: Release
- name: BuildPlatform
  value: Any CPU
- group: SignClient
- group: AppleCert

stages:
- stage: buildTest
  displayName: Build & Test
  jobs:
  - template: jobs/prism-core.yml

  - template: jobs/prism-forms.yml

  - template: jobs/prism-wpf.yml

- stage: sandbox
  displayName: Sandbox
  jobs:
  - template: jobs/sandbox-wpf.yml

  - template: jobs/sandbox-android.yml

  - template: jobs/sandbox-ios.yml

- stage: buildPackage
  displayName: Build Prism Library
  jobs:
  - template: jobs/prism-lib.yml

- stage: deploy
  displayName: Deploy Artifacts
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment: MyGet
    displayName: MyGet.org
    environment: MyGet
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'Prism-MyGet'

  - deployment: NuGet
    displayName: NuGet.org
    environment: NuGet
    condition: and(succeeded(),or(eq(variables['IS_PREVIEW'], true), eq(variables['IS_RELEASE'], true)))
    strategy:
      runOnce:
        deploy:
          steps:
          - powershell: ./Process-Release.ps1
            displayName: Process Artifacts for Release
            workingDirectory: $(System.DefaultWorkingDirectory)/Source/build

          - task: ArchiveFiles@2
            displayName: 'Archive Assembly Artifacts'
            inputs:
              rootFolderOrFile: '$(DLLArtifactsPath)'
              archiveFile: '$(DLLArtifactsZip)'

          - task: GithubRelease@0 
            displayName: 'Create GitHub Release'
            inputs:
              githubConnection: 'Prism GitHub Connection'
              title: '$(ReleaseDisplayName)'
              tag: 'v$(VersionName)'
              isPreRelease: $(IS_PREVIEW)
              assets: |
               $(DLLArtifactsZip)
               $(Pipeline.Workspace)/**/*.nupkg
              isDraft: true

          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;$(Pipeline.Workspace)/**/*.symbols.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'NuGet.org'
